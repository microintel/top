{
  "C syntax": [
    "#include <stdio.h> \n\n  int main(){\n     printf(\"hi\");\n     return 0;\n}\n",
    "https://www.w3schools.com/c/tryc.php?filename=demo_helloworld"
  ],
  "single statements": [
    "printf(\"anthing here\");\n",
    "https://www.w3schools.com/c/tryc.php?filename=demo_statements"
  ],
  "multiple statements": [
    "printf(\"Hello World!\");\nprintf(\"Have a good day!\");\nreturn 0;\n",
    "https://www.w3schools.com/c/tryc.php?filename=demo_statements2"
  ],
  "output / print text": [
    "#include <stdio.h> \n\n  int main() {\n  printf(\"Hello World!\");\n  return 0;\n}\n",
    "https://www.w3schools.com/c/tryc.php?filename=demo_output"
  ],
  "double quotes": [
    "printf(\"This sentence will work!\");\n // correctprintf(This sentence will work);\n // wrong",
    "https://www.w3schools.com/c/tryc.php?filename=demo_output_quotes_err"
  ],
  "printf function": [
    "printf(\"Hello World!\");\n  printf(\"I am learning C.\");\n  printf(\"And it is awesome!\");\n",
    "https://www.w3schools.com/c/tryc.php?filename=demo_output2"
  ],
  "new lines": [
    "printf(\"Hello World!\\n\");\nprintf(\"I am learning C.\");\n",
    "https://www.w3schools.com/c/tryc.php?filename=demo_newline"
  ],
  "escape sequence": [
    "printf(\"Hello World!\\n\\n \\t \\\\\");\n  printf(\"I am learning C.\");\n",
    "https://www.w3schools.com/c/tryc.php?filename=demo_esc_char"
  ],
  "comments single and multiple": [
    "// thus is single /* multi   ple   line    comment*/",
    "https://www.w3schools.com/c/tryc.php?filename=demo_comments_multi"
  ],
  "variable": ["abcd",""],
  "declaring variable":[ "type variableNmae = value; //syntaxint x= 10;",""],
  "display variable": [
    "int myNum = 15;\nprintf(myNum);\n // wrongprintf(\"%d\",myNum);\n //correct",
    "https://www.w3schools.com/c/tryc.php?filename=demo_variables_printf_err"
  ],
  "format specifiers": [
    "%d    %f  %lf  %c  %s \n\n  int myNum = 15;\n            // Integer (whole number)float myFloatNum = 5.99;\n   // Floating point numberchar myLetter = 'D';\n       // Characterprintf(\"%d\\n\", myNum);\nprintf(\"%f\\n\", myFloatNum);\nprintf(\"%c\\n\", myLetter);\n",
    "https://www.w3schools.com/c/tryc.php?filename=demo_variables_data_types"
  ],
  "Change Variable Values": [
    "int myNum = 15;\n  // myNum is 15myNum = 10;\n  // Now myNum is 10",
    "https://www.w3schools.com/c/tryc.php?filename=demo_variables_change"
  ],
  "Add Variables Together": [
    "int x = 5;\nint y = 6;\nint sum = x + y;\nprintf(\"%d\", sum);\n",
    "https://www.w3schools.com/c/tryc.php?filename=demo_variables_add"
  ],
  "Declare many Variables": [
    "int x = 5, y = 6, z = 50;\nprintf(\"%d\", x + y + z);\nint x, y, z;\nx = y = z = 50;\nprintf(\"%d\", x + y + z);\n",
    "https://www.w3schools.com/c/tryc.php?filename=demo_variables_multiple"
  ],
  "C Variable Names": ["_ugeeggfywegHGHF",""],
  "Data Types": [
    "int studentID = 15;\nint studentAge = 23;\nfloat studentFee = 75.25;\nchar studentGrade = 'B';\nprintf(\"Student id: %d\\n\", studentID);\nprintf(\"Student age: %d\\n\", studentAge);\nprintf(\"Student fee: %f\\n\", studentFee);\nprintf(\"Student grade: %c\", studentGrade);\n",
    "https://www.w3schools.com/c/tryc.php?filename=demo_variables_reallife"
  ],
  "Basic Data Types": ["int float double char",""],
  "Basic Format Specifiers": "%d or %i ----- int\t%f or %F ----- float\t%lf ---- double\t%c ---- char\t%s ------ string",
  "The char Type": [
    "char myGrade = 'A';\nprintf(\"%c\", myGrade);\nchar a = 65, b = 66, c = 67;\nprintf(\"%c\", a);\nprintf(\"%c\", b);\nprintf(\"%c\", c);\n",
    "https://www.w3schools.com/c/tryc.php?filename=demo_data_types_characters"
  ],
  "Numeric Types": "int myNum = 1000;printf(\"%d\", myNum);float myNum = 5.75;printf(\"%f\", myNum);double myNum = 19.99;printf(\"%lf\", myNum);",
  "Scientific Numbers": [
    "float f1 = 35e3;\n   // 35 * 10^3 = 35000double d1 = 12E4;\n  // 12 * 10^4 = 120000printf(\"%f\\n\", f1);\nprintf(\"%lf\", d1);\n",
    "https://www.w3schools.com/c/tryc.php?filename=demo_data_types_scientific"
  ],
  "Set Decimal Precision": [
    "float myFloatNum = 3.5;\ndouble myDoubleNum = 19.99;\nprintf(\"%f\\n\", myFloatNum);\n // Outputs 3.500000printf(\"%lf\", myDoubleNum);\n // Outputs 19.990000float myFloatNum = 3.5;\nprintf(\"%f\\n\", myFloatNum);\n   // Default will show 6 digits after the decimal pointprintf(\"%.1f\\n\", myFloatNum);\n // Only show 1 digitprintf(\"%.2f\\n\", myFloatNum);\n // Only show 2 digitsprintf(\"%.4f\", myFloatNum);\n   // Only show 4 digits",
    "https://www.w3schools.com/c/tryc.php?filename=demo_decimal_precision2"
  ],
  "Get the Memory Size": [
    "int\t2 or 4 bytesfloat\t4 bytesdouble\t8 byteschar\t1 byteint myInt;\nfloat myFloat;\ndouble myDouble;\nchar myChar;\nprintf(\"%zu\\n\", sizeof(myInt));\nprintf(\"%zu\\n\", sizeof(myFloat));\nprintf(\"%zu\\n\", sizeof(myDouble));\nprintf(\"%zu\\n\", sizeof(myChar));\n",
    "https://www.w3schools.com/c/tryc.php?filename=demo_sizeof"
  ],
  "Type Casting": [
    "int x = 5;\nint y = 2;\nint sum = 5 / 2;\nprintf(\"%d\", sum);\n // Outputs 2",
    "https://www.w3schools.com/c/tryc.php?filename=demo_type_conversion"
  ],
  "Implicit Conversion": [
    "// Automatic conversion: int to floatfloat myFloat = 9;\nprintf(\"%f\", myFloat);\n // 9.000000",
    "https://www.w3schools.com/c/tryc.php?filename=demo_type_conversion_auto"
  ],
  "Explicit Conversion": [
    "float sum = (float) 5 / 2;\nprintf(\"%f\", sum);\n // 2.500000",
    "https://www.w3schools.com/c/tryc.php?filename=demo_type_conversion_man"
  ],
  "Constants": [
    "const int minutesPerHour;\nminutesPerHour = 60;\n // cant update",
    "https://www.w3schools.com/c/tryc.php?filename=demo_constants3"
  ],
  "Operators": [
    "int sum1 = 100 + 50;\n        // 150 (100 + 50)int sum2 = sum1 + 250;\n      // 400 (150 + 250)int sum3 = sum2 + sum2;\n     // 800 (400 + 400)",
    "https://www.w3schools.com/c/tryc.php?filename=demo_oper2"
  ],
  "Arithmetic Operators": "+\tAddition\tx + y\t-\tSubtraction\tx - y\t*\tMultiplication\tx * y\t/\tDivision\tx / y\t%\tModulus\tReturns\tx % y\t++\tIncrement 1 \t++x\t--\tDecrement 1     --x",
  "Assignment Operators": "=\tx = 5\tx = 5\t+=\tx += 3\tx = x + 3\t-=\tx -= 3\tx = x - 3\t*=\tx *= 3\tx = x * 3\t/=\tx /= 3\tx = x / 3\t%=\tx %= 3\tx = x % 3\t&=\tx &= 3\tx = x & 3\t|=\tx |= 3\tx = x | 3\t^=\tx ^= 3\tx = x ^ 3\t>>=\tx >>= 3\tx = x >> 3\t<<=\tx <<= 3\tx = x << 3",
  "Comparison Operators": "==\tEqual to\tx == y\t!=\tNot equal\tx != y\t>\tGreater than\tx > y\t<\tLess than\tx < y>=\tGreater than or equal to\tx >= y<=\tLess than or equal to\tx <= y",
  "Logical Operators": "&& \tAND\tx < 5 &&  x < 10|| \tOR\tx < 5 || x < 4\t!\tNOT\t!(x < 5 && x < 10)",
  "Booleans values": "YES / NOON / OFFTRUE / FALSE1 / 0",
  "Boolean Variables/ expressions": [
    "#include <stdbool.h>bool isProgrammingFun = true;\nbool isFishTasty = false;\nprintf(\"%d\", isProgrammingFun);\n   // Returns 1 (true)printf(\"%d\", isFishTasty);\n        // Returns 0 (false)",
    "https://www.w3schools.com/c/tryc.php?filename=demo_boolean"
  ],
  "Comparing Values and Variables": [
    "int x = 10;\nint y = 9;\nprintf(\"%d\", x > y);\n",
    "https://www.w3schools.com/c/tryc.php?filename=demo_boolean3"
  ],
  "Conditions if, else if, else": [
    "if (20 > 18) {\n  //someghdj}\nelse if(8>7){\n//jfhwdhfewhf}\nelse{\n// sjhbfbwjhdhbf}\nshort if condition syntacvariable = (condition) ? expressionTrue : expressionFalse;\n",
    "https://www.w3schools.com/c/tryc.php?filename=demo_if_else_if"
  ],
  "switch": [
    "int day = 4;\nswitch (day) {\n  case 1:    printf(\"Monday\");\n    break;\n  case 2:    printf(\"Tuesday\");\n    break;\n  case 3:    printf(\"Wednesday\");\n    break;\n  case 4:    printf(\"Thursday\");\n    break;\n  case 5:    printf(\"Friday\");\n    break;\n  case 6:    printf(\"Saturday\");\n    break;\n  case 7:    printf(\"Sunday\");\n    break;\n}\n// Outputs \"Thursday\" (day 4)",
    "https://www.w3schools.com/c/tryc.php?filename=demo_switch"
  ],
  "loops for, while, do-while": "while (condition) {  // code block to be executed}do {  // code block to be executed}while (condition);for (expression 1; expression 2; expression 3) {  // code block to be executed}",
  "break": [
    "int i;\nfor (i = 0;\n i < 10;\n i++) {\n  if (i == 4) {\n    break;\n  }\n  printf(\"%d\\n\", i);\n}\n",
    "https://www.w3schools.com/c/tryc.php?filename=demo_break"
  ],
  "continue": [
    "int i;\nfor (i = 0;\n i < 10;\n i++) {\n  if (i == 4) {\n    continue;\n  }\n  printf(\"%d\\n\", i);\n}\n",
    "https://www.w3schools.com/c/tryc.php?filename=demo_continue"
  ],
  "Break and Continue in While Loop": [
    "break example int i = 0;\nwhile (i < 10) {\n  if (i == 4) {\n    break;\n  }\n  printf(\"%d\\n\", i);\n  i++;\n}\nContinue Exampleint i = 0;\nwhile (i < 10) {\n  if (i == 4) {\n    i++;\n    continue;\n  }\n  printf(\"%d\\n\", i);\n  i++;\n}\n",
    "https://www.w3schools.com/c/c_break_continue.php"
  ],
  "Arrays": "int myNumbers[] = {25, 50, 75, 100};",
  "Access the Elements of an Array": [
    "int myNumbers[] = {\n25, 50, 75, 100}\n;\nprintf(\"%d\", myNumbers[0]);\n// Outputs 25",
    "https://www.w3schools.com/c/tryc.php?filename=demo_array"
  ],
  "Change an Array Element": [
    "int myNumbers[] = {\n25, 50, 75, 100}\n;\nmyNumbers[0] = 33;\nprintf(\"%d\", myNumbers[0]);\n// Now outputs 33 instead of 25",
    "https://www.w3schools.com/c/tryc.php?filename=demo_array_change"
  ],
  "Loop Through an Array": [
    "int myNumbers[] = {\n25, 50, 75, 100}\n;\nint i;\nfor (i = 0;\n i < 4;\n i++) {\n  printf(\"%d\\n\", myNumbers[i]);\n}\n",
    "https://www.w3schools.com/c/tryc.php?filename=demo_array_loop"
  ],
  "Set Array Size": [
    "// Declare an array of four integers:int myNumbers[4];\n// Add elementsmyNumbers[0] = 25;\nmyNumbers[1] = 50;\nmyNumbers[2] = 75;\nmyNumbers[3] = 100;\n",
    "https://www.w3schools.com/c/tryc.php?filename=demo_array_set_size"
  ],
  "Avoid Mixing Data Types": "int myArray[] = {25, 50, 75, 3.15, 5.99}; //error",
  "Get Array Size or Length": [
    "int myNumbers[] = {\n10, 25, 50, 75, 100}\n;\nprintf(\"%zu\", sizeof(myNumbers));\n // Prints 20",
    "https://www.w3schools.com/c/tryc.php?filename=demo_array_get_size"
  ],
  "Making Better Loops": [
    "int myNumbers[] = {\n25, 50, 75, 100}\n;\nint length = sizeof(myNumbers) / sizeof(myNumbers[0]);\nint i;\nfor (i = 0;\n i < length;\n i++) {\n  printf(\"%d\\n\", myNumbers[i]);\n}\n",
    "https://www.w3schools.com/c/tryc.php?filename=demo_array_loop_length"
  ],
  "Multidimensional Arrays": "1D 2D 3D....",
  "Two- Dimensional Arrays": "int matrix[2][3] = { {1, 4, 2}, {3, 6, 8} };",
  "Access the Elements of a 2D Array": [
    "int matrix[2][3] = {\n {\n1, 4, 2}\n, {\n3, 6, 8}\n }\n;\nprintf(\"%d\", matrix[0][2]);\n  // Outputs 2",
    "https://www.w3schools.com/c/tryc.php?filename=demo_array_multi_access"
  ],
  "Change Elements in a 2D Array": [
    "int matrix[2][3] = {\n {\n1, 4, 2}\n, {\n3, 6, 8}\n }\n;\nmatrix[0][0] = 9;\nprintf(\"%d\", matrix[0][0]);\n  // Now outputs 9 instead of 1",
    "https://www.w3schools.com/c/tryc.php?filename=demo_array_multi_change"
  ],
  "Loop Through a 2D Array": [
    "int matrix[2][3] = {\n {\n1, 4, 2}\n, {\n3, 6, 8}\n }\n;\nint i, j;\nfor (i = 0;\n i < 2;\n i++) {\n  for (j = 0;\n j < 3;\n j++) {\n    printf(\"%d\\n\", matrix[i][j]);\n  }\n}\n",
    "https://www.w3schools.com/c/tryc.php?filename=demo_array_multi_loop"
  ],
  "Three-Dimensional Arrays": [
    "int example[2][4][3];\n",
    "https://www.w3schools.com/c/tryc.php?filename=demo_array_multi_3d"
  ],
  "Strings": "char greetings[] = \"Hello World!\";",
  "Access Strings": [
    "char greetings[] = \"Hello World!\";\nprintf(\"%c\", greetings[0]);\n",
    "https://www.w3schools.com/c/tryc.php?filename=demo_strings_access"
  ],
  "Modify Strings": [
    "char greetings[] = \"Hello World!\";\ngreetings[0] = 'J';\nprintf(\"%s\", greetings);\n// Outputs Jello World! instead of Hello World!",
    "https://www.w3schools.com/c/tryc.php?filename=demo_strings_modify"
  ],
  "Loop Through a String": [
    "char carName[] = \"Volvo\";\nint i;\nfor (i = 0;\n i < 5;\n ++i) {\n  printf(\"%c\\n\", carName[i]);\n}\n",
    "https://www.w3schools.com/c/tryc.php?filename=demo_strings_loop"
  ],
  "Another Way Of Creating Strings": "char greetings[] = {'H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd', '!', '\\0'};printf(\"%s\", greetings);",
  "Differences": "char greetings[] = {'H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd', '!', '\\0'};char greetings2[] = \"Hello World!\";printf(\"%zu\\n\", sizeof(greetings));   // Outputs 13printf(\"%zu\\n\", sizeof(greetings2));  // Outputs 13",
  "Strings - Special Characters": [
    "Escape character\tResult\t  Description\\'                        '\t   Single quote\\\"\t                  \"\t   Double quote\\\\\t                  \\    \t   Backslash",
    "https://www.w3schools.com/c/tryc.php?filename=demo_strings_esc1"
  ],
  "String Functions": "#include <string.h>like length,copy,concat,compare",
  "String Length": [
    "strlen();\nchar alphabet[] = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\nprintf(\"%zu\", strlen(alphabet));\n",
    "https://www.w3schools.com/c/tryc.php?filename=demo_strings_length"
  ],
  "String Concatenation": [
    "char str1[20] = \"Hello \";\nchar str2[] = \"World!\";\n// Concatenate str2 to str1 (result is stored in str1)strcat(str1, str2);\n// Print str1printf(\"%s\", str1);\n",
    "https://www.w3schools.com/c/tryc.php?filename=demo_strings_strcat"
  ],
  "Copy Strings": [
    "char str1[20] = \"Hello World!\";\nchar str2[20];\n// Copy str1 to str2strcpy(str2, str1);\n// Print str2printf(\"%s\", str2);\n",
    "https://www.w3schools.com/c/tryc.php?filename=demo_strings_strcpy"
  ],
  "Compare Strings": [
    "char str1[] = \"Hello\";\nchar str2[] = \"Hello\";\nchar str3[] = \"Hi\";\n// Compare str1 and str2, and print the resultprintf(\"%d\\n\", strcmp(str1, str2));\n  // Returns 0 (the strings are equal)// Compare str1 and str3, and print the resultprintf(\"%d\\n\", strcmp(str1, str3));\n  // Returns -4 (the strings are not equal)",
    "https://www.w3schools.com/c/tryc.php?filename=demo_strings_strcmp"
  ],
  "Complete String Reference": [
    "string refresence",
    "https://www.w3schools.com/c/c_ref_string.php"
  ],
  "User Input": [
    "int myNum;\n// Ask the user to type a numberprintf(\"Type a number: \\n\");\n// Get and save the number the user typesscanf(\"%d\", &myNum);\n// Output the number the user typedprintf(\"Your number is: %d\", myNum);\n",
    "https://www.w3schools.com/cpp/showcpp.asp?filename=demo_user_input_c"
  ],
  "Multiple Inputs": [
    "int myNum;\nchar myChar;\n// Ask the user to type a number AND a characterprintf(\"Type a number AND a character and press enter: \\n\");\n// Get and save the number AND character the user typesscanf(\"%d %c\", &myNum, &myChar);\n// Print the numberprintf(\"Your number is: %d\\n\", myNum);\n// Print the characterprintf(\"Your character is: %c\\n\", myChar);\n",
    "https://www.w3schools.com/cpp/showcpp.asp?filename=demo_user_input_c_multi"
  ],
  "Take String Input": [
    "char firstName[30];\n// Ask the user to input some textprintf(\"Enter your first name: \\n\");\n// Get and save the textscanf(\"%s\", firstName);\n// Output the textprintf(\"Hello %s\", firstName);\n",
    "https://www.w3schools.com/cpp/showcpp.asp?filename=demo_user_input_str_c"
  ],
  "Memory Address": [
    "int myAge = 43;\nprintf(\"%p\", &myAge);\n // Outputs 0x7ffe5367e044",
    "https://www.w3schools.com/c/tryc.php?filename=demo_memory_adr"
  ],
  "Creating Pointers": [
    "int myAge = 43;\n // an int variableprintf(\"%d\", myAge);\n  // Outputs the value of myAge (43)printf(\"%p\", &myAge);\n // Outputs the memory address of myAge (0x7ffe5367e044)",
    "https://www.w3schools.com/c/tryc.php?filename=demo_pointers_memadr"
  ],
  "Dereference": [
    "*int myAge = 43;\n     // Variable declarationint* ptr = &myAge;\n  // Pointer declaration// Reference: Output the memory address of myAge with the pointer (0x7ffe5367e044)printf(\"%p\\n\", ptr);\n// Dereference: Output the value of myAge with the pointer (43)printf(\"%d\\n\", *ptr);\n",
    "https://www.w3schools.com/c/tryc.php?filename=demo_pointers2"
  ],
  "Pointers & Arrays": [
    "int myNumbers[4] = {\n25, 50, 75, 100}\n;\nint i;\nfor (i = 0;\n i < 4;\n i++) {\n  printf(\"%p\\n\", &myNumbers[i]);\n}\nResult:0x7ffe70f9d8f00x7ffe70f9d8f40x7ffe70f9d8f80x7ffe70f9d8fc",
    "https://www.w3schools.com/c/tryc.php?filename=demo_pointers_arrays2"
  ],
  "How Are Pointers Related to Arrays": [
    "int myNumbers[4] = {\n25, 50, 75, 100}\n;\n// Get the memory address of the myNumbers arrayprintf(\"%p\\n\", myNumbers);\n// Get the memory address of the first array elementprintf(\"%p\\n\", &myNumbers[0]);\nResult:0x7ffe70f9d8f00x7ffe70f9d8f0",
    "https://www.w3schools.com/c/tryc.php?filename=demo_pointers_arrays_first"
  ],
  "Functions": "A function is a block of code which only runs when it is called.",
  "Predefined Functions": "main() printf()scanf()",
  "Create a Function": "void myFunction() {  // code to be executed}int x(){}",
  "Call a Function": [
    "// Create a functionvoid myFunction() {\n  printf(\"I just got executed!\");\n}\nint main() {\n  myFunction();\n // call the function  return 0;\n}\n// Outputs \"I just got executed!\"",
    "https://www.w3schools.com/c/tryc.php?filename=demo_functions"
  ],
  "Parameters and Arguments": [
    "void myFunction(char name[]) {\n  printf(\"Hello %s\\n\", name);\n}\nint main() {\n  myFunction(\"Liam\");\n  myFunction(\"Jenny\");\n  myFunction(\"Anja\");\n  return 0;\n}\n// Hello Liam// Hello Jenny// Hello Anja",
    "https://www.w3schools.com/c/tryc.php?filename=demo_functions_param"
  ],
  "Multiple Parameters": [
    "void myFunction(char name[], int age) {\n  printf(\"Hello %s. You are %d years old.\\n\", name, age);\n}\nint main() {\n  myFunction(\"Liam\", 3);\n  myFunction(\"Jenny\", 14);\n  myFunction(\"Anja\", 30);\n  return 0;\n}\n// Hello Liam. You are 3 years old.// Hello Jenny. You are 14 years old.// Hello Anja. You are 30 years old.",
    "https://www.w3schools.com/c/tryc.php?filename=demo_functions_param_multi"
  ],
  "Pass Arrays as Function Parameters": [
    "void myFunction(int myNumbers[5]) {\n  for (int i = 0;\n i < 5;\n i++) {\n    printf(\"%d\\n\", myNumbers[i]);\n  }\n}\nint main() {\n  int myNumbers[5] = {\n10, 20, 30, 40, 50}\n;\n  myFunction(myNumbers);\n  return 0;\n}\n",
    "https://www.w3schools.com/c/tryc.php?filename=demo_functions_param_array"
  ],
  "Return Values": [
    "int myFunction(int x) {\n  return 5 + x;\n}\nint main() {\n  printf(\"Result is: %d\", myFunction(3));\n  return 0;\n}\n// Outputs 8 (5 + 3)",
    "https://www.w3schools.com/c/tryc.php?filename=demo_functions_return"
  ],
  "Scope": "In C, variables are only accessible inside the region they are created. This is called scope.",
  "Local Scope": [
    "void myFunction() {\n  // Local variable that belongs to myFunction  int x = 5;\n  // Print the variable x  printf(\"%d\", x);\n}\nint main() {\n  myFunction();\n  return 0;\n}\n",
    "https://www.w3schools.com/c/tryc.php?filename=demo_scope"
  ],
  "Global Scope": [
    "int x = 5;\nvoid myFunction() {\n  // We can use x here  printf(\"%d\", x);\n}\nint main() {\n  myFunction();\n  // We can also use x here  printf(\"%d\", x);\n  return 0;\n}\n",
    "https://www.w3schools.com/c/tryc.php?filename=demo_scope_global"
  ],
  "Naming Variables": [
    "int x = 5;\nvoid myFunction() {\n  // Local variable with the same name as the global variable (x)  int x = 22;\n  printf(\"%d\\n\", x);\n // Refers to the local variable x}\nint main() {\n  myFunction();\n  printf(\"%d\\n\", x);\n // Refers to the global variable x  return 0;\n}\n",
    "https://www.w3schools.com/c/tryc.php?filename=demo_scope_global2"
  ],
  "method / Function Declaration and Definition": [
    "// Function declarationvoid myFunction();\n// The main methodint main() {\n  myFunction();\n  // call the function  return 0;\n}\n// Function definitionvoid myFunction() {\n  printf(\"I just got executed!\");\n}\n",
    "https://www.w3schools.com/c/tryc.php?filename=demo_functions_opt"
  ],
  "What About Parameters": [
    "// Function declarationint myFunction(int x, int y);\n// The main methodint main() {\n  int result = myFunction(5, 3);\n // call the function  printf(\"Result is = %d\", result);\n  return 0;\n}\n// Function definitionint myFunction(int x, int y) {\n  return x + y;\n}\n",
    "https://www.w3schools.com/c/tryc.php?filename=demo_functions_return4"
  ],
  "Functions Calling Other Functions": [
    "void myFunction();\nvoid myOtherFunction();\nint main() {\n  myFunction();\n // call myFunction (from main)  return 0;\n}\n// Define myFunctionvoid myFunction() {\n  printf(\"Some text in myFunction\\n\");\n  myOtherFunction();\n // call myOtherFunction (from myFunction)}\n// Define myOtherFunctionvoid myOtherFunction() {\n  printf(\"Hey! Some text in myOtherFunction\\n\");\n}\n",
    "https://www.w3schools.com/c/tryc.php?filename=demo_functions_other"
  ],
  "Recursion": [
    "function calls itselfint sum(int k);\nint main() {\n  int result = sum(10);\n  printf(\"%d\", result);\n  return 0;\n}\nint sum(int k) {\n  if (k > 0) {\n    return k + sum(k - 1);\n  }\n else {\n    return 0;\n  }\n}\n",
    "https://www.w3schools.com/c/tryc.php?filename=demo_functions_recursion"
  ],
  "Math Functions": "#include <math.h>",
  "Square Root": [
    "printf(\"%f\", sqrt(16));\n",
    "https://www.w3schools.com/c/tryc.php?filename=demo_math_sqrt"
  ],
  "Round a Number": [
    "printf(\"%f\", ceil(1.4));\nprintf(\"%f\", floor(1.4));\n",
    "https://www.w3schools.com/c/tryc.php?filename=demo_math_ceil_floor"
  ],
  "Power": [
    "printf(\"%f\", pow(4, 3));\n",
    "https://www.w3schools.com/c/tryc.php?filename=demo_math_pow"
  ],
  "math refrence": [
    "math refresnces",
    "https://www.w3schools.com/c/c_ref_math.php"
  ],
  "file handling": "FILE *fptr;fptr = fopen(filename, mode);",
  "create file": "FILE *fptr;// Create a filefptr = fopen(\"filename.txt\", \"w\");// Close the filefclose(fptr);",
  "Write To a File": "FILE *fptr;// Open a file in writing modefptr = fopen(\"filename.txt\", \"w\");// Write some text to the filefprintf(fptr, \"Some text\");// Close the filefclose(fptr);",
  "Append Content To a File": "FILE *fptr;// Open a file in append modefptr = fopen(\"filename.txt\", \"a\");// Append some text to the filefprintf(fptr, \"\\nHi everybody!\");// Close the filefclose(fptr);",
  "Read a File": "FILE *fptr;// Open a file in read modefptr = fopen(\"filename.txt\", \"r\");",
  "read file ex 1": "FILE *fptr;// Open a file in read modefptr = fopen(\"filename.txt\", \"r\");// Store the content of the filechar myString[100];// Read the content and store it inside myStringfgets(myString, 100, fptr);// Print the file contentprintf(\"%s\", myString);// Close the filefclose(fptr);",
  "Structures": "Structures (also called structs) are a way to group several related variables into one place.",
  "Create a Structure": "struct MyStructure {   // Structure declaration  int myNum;           // Member (int variable)  char myLetter;       // Member (char variable)}; // End the structure with a semicolon",
  "Access Structure Members": [
    "// Create a structure called myStructurestruct myStructure {\n  int myNum;\n  char myLetter;\n}\n;\nint main() {\n  // Create a structure variable of myStructure called s1  struct myStructure s1;\n  // Assign values to members of s1  s1.myNum = 13;\n  s1.myLetter = 'B';\n  // Print values  printf(\"My number: %d\\n\", s1.myNum);\n  printf(\"My letter: %c\\n\", s1.myLetter);\n  return 0;\n}\n",
    "https://www.w3schools.com/c/tryc.php?filename=demo_struct"
  ],
  "string in struture": [
    "struct myStructure {\n  int myNum;\n  char myLetter;\n  char myString[30];\n // String}\n;\nint main() {\n  struct myStructure s1;\n  // Assign a value to the string using the strcpy function  strcpy(s1.myString, \"Some text\");\n  // Print the value  printf(\"My string: %s\", s1.myString);\n  return 0;\n}\n",
    "https://www.w3schools.com/c/tryc.php?filename=demo_struct_strings2"
  ],
  "Copy Structures": [
    "struct myStructure s1 = {\n13, 'B', \"Some text\"}\n;\nstruct myStructure s2;\ns2 = s1;\n",
    "https://www.w3schools.com/c/tryc.php?filename=demo_struct_copy"
  ],
  "Modify Values struture": [
    "struct myStructure {\n  int myNum;\n  char myLetter;\n  char myString[30];\n}\n;\nint main() {\n  // Create a structure variable and assign values to it  struct myStructure s1 = {\n13, 'B', \"Some text\"}\n;\n  // Modify values  s1.myNum = 30;\n  s1.myLetter = 'C';\n  strcpy(s1.myString, \"Something else\");\n  // Print values  printf(\"%d %c %s\", s1.myNum, s1.myLetter, s1.myString);\n  return 0;\n}\n",
    "https://www.w3schools.com/c/tryc.php?filename=demo_struct_modify"
  ],
  "Structures and Pointers": [
    "// Define a structstruct Car {\n  char brand[50];\n  int year;\n}\n;\nint main() {\n  struct Car car = {\n\"Toyota\", 2020}\n;\n  // Declare a pointer to the struct  struct Car *ptr = &car;\n  // Access members using the -> operator  printf(\"Brand: %s\\n\", ptr->brand);\n  printf(\"Year: %d\\n\", ptr->year);\n  return 0;\n}\n",
    "https://www.w3schools.com/c/tryc.php?filename=demo_structs_pointers"
  ],
  "Passing Struct Pointers to Functions": [
    "struct Car {\n  char brand[20];\n  int year;\n}\n;\n// Function that takes a pointer to a Car struct and updates the yearvoid updateYear(struct Car *c) {\n  c->year = 2025;\n  // Change the year}\nint main() {\n  struct Car myCar = {\n\"Toyota\", 2020}\n;\n  updateYear(&myCar);\n  // Pass a pointer so the function can change the year  printf(\"Brand: %s\\n\", myCar.brand);\n  printf(\"Year: %d\\n\", myCar.year);\n  return 0;\n}\n",
    "https://www.w3schools.com/c/tryc.php?filename=demo_structs_pointers2"
  ],
  "Unions": "A union is similar to a struct in that it can store members of different data types.",
  "Declare a Union": "union myUnion {        // Union declaration  int myNum;           // Member (int)  char myLetter;       // Member (char)  char myString[30];   // Member (char array)}; int main() {  union myUnion u1;  // Create a union variable with the name \"u1\":  return 0;}",
  "Access Union Members": [
    "union myUnion {\n  int myNum;\n  char myLetter;\n  char myString[30];\n}\n;\nint main() {\n  union myUnion u1;\n  u1.myNum = 1000;\n  // Since this is the last value written to the union, myNum no longer holds 1000 - its value is now invalid  u1.myLetter = 'A';\n  printf(\"myNum: %d\\n\", u1.myNum);\n // This value is no longer reliable  printf(\"myLetter: %c\\n\", u1.myLetter);\n // Prints 'A'  return 0;\n}\n",
    "https://www.w3schools.com/c/tryc.php?filename=demo_union"
  ],
  "Size of a Union": [
    "union myUnion {\n  int myNum;\n  char myLetter;\n  char myString[36];\n}\n;\nint main() {\n  union myUnion u1;\n  printf(\"Size of union: %zu bytes\\n\", sizeof(u1));\n  return 0;\n}\n",
    "https://www.w3schools.com/c/tryc.php?filename=demo_union_size"
  ],
  "Enums": "enum Level {  LOW,  MEDIUM,  HIGH};",
  "Change Values enums": [
    "enum Level {\n  LOW = 25,  MEDIUM = 50,  HIGH = 75}\n;\n",
    "https://www.w3schools.com/c/tryc.php?filename=demo_enum_change"
  ],
  "Enum in a Switch Statement": [
    "enum Level {\n  LOW = 1,  MEDIUM,  HIGH}\n;\nint main() {\n  enum Level myVar = MEDIUM;\n  switch (myVar) {\n    case 1:      printf(\"Low Level\");\n      break;\n    case 2:      printf(\"Medium level\");\n      break;\n    case 3:      printf(\"High level\");\n      break;\n  }\n  return 0;\n}\n",
    "https://www.w3schools.com/c/tryc.php?filename=demo_enum_switch"
  ],
  "Memory in C": [
    "int myInt;\nfloat myFloat;\ndouble myDouble;\nchar myChar;\nprintf(\"%zu\\n\", sizeof(myInt));\n      // 4 bytesprintf(\"%zu\\n\", sizeof(myFloat));\n    // 4 bytesprintf(\"%zu\\n\", sizeof(myDouble));\n   // 8 bytesprintf(\"%zu\\n\", sizeof(myChar));\n     // 1 byte",
    "https://www.w3schools.com/c/tryc.php?filename=demo_memory_sizeof"
  ],
  "Memory Management": "Memory management is the process of handling how much memory a program uses through allocation, reallocation and deallocation (often referred to as \"freeing\"). We will introduce each of these topics in the following chapters.",
  "Static Memory": [
    "int students[20];\nprintf(\"%zu\", sizeof(students));\n // 80 bytes",
    "https://www.w3schools.com/c/tryc.php?filename=demo_memory_static"
  ],
  "Dynamic Memory": "malloc() calloc()int *ptr1 = malloc(size);int *ptr2 = calloc(amount, size);",
  "Access Dynamic Memory": [
    "ptr[0] = 12;\n*ptr = 12;\n// Allocate memoryint *ptr;\nptr = calloc(4, sizeof(*ptr));\n// Write to the memory*ptr = 2;\nptr[1] = 4;\nptr[2] = 6;\n// Read from the memoryprintf(\"%d\\n\", *ptr);\nprintf(\"%d %d %d\", ptr[1], ptr[2], ptr[3]);\n",
    "https://www.w3schools.com/c/tryc.php?filename=demo_memory_access"
  ],
  "Reallocate Memory": "realloc()int *ptr2 = realloc(ptr1, size);",
  "NULL Pointer & Error Checking": [
    "int *ptr1, *ptr2;\n// Allocate memoryptr1 = malloc(4);\n// Attempt to resize the memoryptr2 = realloc(ptr1, 8);\n// Check whether realloc is able to resize the memory or notif (ptr2 == NULL) {\n  // If reallocation fails  printf(\"Failed. Unable to resize memory\");\n}\n else {\n  // If reallocation is sucessful  printf(\"Success. 8 bytes reallocated at address %p \\n\", ptr2);\n  ptr1 = ptr2;\n  // Update ptr1 to point to the newly allocated memory}\n",
    "https://www.w3schools.com/c/tryc.php?filename=demo_memory_reallocate_null"
  ],
  "Deallocate (free) Memory": [
    "free(pointer);\nint *ptr;\nptr = malloc(sizeof(*ptr));\nfree(ptr);\nptr = NULL;\nexample int *ptr;\nptr = malloc(sizeof(*ptr));\n // Allocate memory for one integer// If memory cannot be allocated, print a message and end the main() functionif (ptr == NULL) {\n  printf(\"Unable to allocate memory\");\n  return 1;\n}\n// Set the value of the integer*ptr = 20;\n// Print the integer valueprintf(\"Integer value: %d\\n\", *ptr);\n// Free allocated memoryfree(ptr);\n// Set the pointer to NULL to prevent it from being accidentally usedptr = NULL;\n",
    "https://www.w3schools.com/c/tryc.php?filename=demo_memory_free"
  ],
  "stdlib Reference": [
    "standar library refresnces",
    "https://www.w3schools.com/c/c_ref_stdlib.php"
  ]
}
